name: Update Project Version
description: |-
  Updates and commits the project version.
  Version is calculated with calver: MAJOR.MINOR.INCREMENT
  where: MAJOR = year, MINOR = month

inputs:
  token:
    description: Token for Github API
    required: true
  repo:
    description: Github Repository <owner/name>
    required: true
outputs:
  release_version:
    description: "The new release version"
    value: ${{ steps.compute.outputs.release_version }}
  stop_workflow:
    description: true if a new version was commited
    value: ${{ steps.compute.outputs.stop_workflow }}

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4
    - name: Determine changed files
      uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          publish:
            - 'cmd/**'
            - 'go.mod'
            - 'go.sum'
            - 'Dockerfile'
    - name: Compute Version
      shell: bash
      id: compute
      run: |-
        release_version=""
        stop_workflow=false
        
        if [[ ${{ github.ref }} != refs/tags* ]]; then
          if [[ "${{ steps.filter.outputs.publish }}" != "true" ]]; then
            stop_workflow=true
          else
            latest_tag="$(curl -sL -X 'GET' \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ inputs.token }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${{ inputs.repo }}/git/refs/tags" \
              | jq -r 'if type=="array" then [.[] | .ref | sub("^refs/tags/"; "")] | last else "" end')"

            tag_prefix="$(date '+%y.%-m.')"
            if [[ "$latest_tag" == "$tag_prefix"* ]]; then
              old_inc=${latest_tag#*.*.}
              new_inc=$(($old_inc + 1))
              if [[ "$old_inc" != "0" ]] && [[ "$new_inc" == "1" ]]; then
                new_inc="0"
              fi
              release_version="$(printf '%s%s' "$tag_prefix" "$new_inc")"
            else
              release_version="$(printf '%s0' "$tag_prefix")"
            fi
          fi
        else
          ref="${{ github.ref }}"
          release_version="${ref#refs/tags/}"
        fi
        printf 'release_version=%s\n' "$release_version" >> $GITHUB_OUTPUT
        printf 'stop_workflow=%s\n' "$stop_workflow" >> $GITHUB_OUTPUT
        cat $GITHUB_OUTPUT
